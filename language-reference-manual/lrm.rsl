package LRM

type Versioning {
  major Integer
  minor Integer
}

type GFDL_License {
  invariant_sections          String [0 .. *]
  front_cover        optional String
  back_cover         optional String
}

type Text {
  text            optional String
  bullets         optional String [2 .. *]
  untraced_reason optional String
}

final type Note extends Text {
  freeze untraced_reason = "Non-normative text"
}

type Grammar extends Text {
  bnf String
}

type Terminal extends Text {
  def      String
  examples String [1 .. *]
}

type Keywords extends Text {}

checks Keywords {
  bullets != null, error "You need to give at least one keyword", bullets
}

type Punctuation extends Text {}

checks Punctuation {
  bullets != null,
    fatal "You need to provide at least one token", bullets
  (forall item in bullets => "`" in item),
    error "You need to use `` to enclose punctuation tokens", bullets
}

enum Kind {
  Static
  Dynamic
}

abstract type Semantics extends Text {
  kind Kind
}

type Static_Semantics extends Semantics {
  freeze kind = Kind.Static
}

type Dynamic_Semantics extends Semantics {
  freeze kind = Kind.Dynamic
}

type Name_Resolution extends Text {}

type Recommendation extends Text {}

type Example extends Text {
  hidden_rsl  optional String
  rsl         optional String
  hidden_trlc optional String
  trlc        optional String
}

checks Example {
  rsl != null xor trlc != null,
    "either RSL or TRLC content must be shown, but not both"
}
