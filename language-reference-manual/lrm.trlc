package LRM

GFDL_License License {
  invariant_sections = []
}

section "Design Goals" {

  Text Goals {
    text = '''It is important to have design goals for a language. The
              design goals of TRLC are:'''

    bullets = [
      '''The intended domain is requirements writing in an industrial
         safety-critical context, where requirements carry a
         lot of meta-data and linkage.''',
      '''Future language releases should be backwards compatible, as
         we anticipate that there will be a large body of
         requirements.''',
      '''Language design should be extensible and flexible for future
         changes.''',
      '''Requirement files (but not necessarily model and check
         files) should be human-readable with minimal
         training or understanding of the language.''',
      '''No business logic should be encoded in the language design.'''
    ]
  }

}

/***********************************************************************/

section "Lexing" {

  section "Encoding" {
    Text File_Encoding {
      text = '''All input files are encoded in UTF-8. Passing a file with a
                different encoding to TRLC results in
                undefined behaviour.'''
    }

    Recommendation File_Encoding_Fixed {
      text = '''It is recommended to try to detect this in an implementation
                and raise a fatal error; but in the interest
                of compatibility and sanity an
                implementation shall not provide a way to
                switch the encoding (at the command-line or
                otherwise).'''
    }
  }

  section "Whitespace and comments" {
    Text Whitespace {
      text = "Whitespace is ignored."
    }

    Text Comments {
      text = '''Comments are C-Style `/* .. */` and C++ style `//`, and are
                ignored. The matching for C-style comments
                is non-greedy.'''
    }
  }

  section "Identifiers and keywords" {
    Terminal Identifier {
      text = '''Identifiers start with a letter and are followed by letters,
                numbers, or underscores.'''
      def = "IDENTIFIER ::= [a-zA-Z][a-zA-Z0-9_]*"
      examples = ["foo",
                  "Potato123",
                  "Kitten_Exploder"]
    }

    Terminal Builtin_Identifier {
      text = '''There is also a legacy "builtin" identifier that is
                deprecated. It will be removed in a future major release.'''
      def = "BUILTIN_IDENTIFIER ::= [a-z]+:[a-zA-Z][a-zA-Z0-9_]*"
      examples = ["trlc:len"]
    }

    Keywords TRLC_Keywords {
      text = '''A keyword is an identifier that is one of the following
                reserved words:'''
      bullets = [
        "abs",
        "and",
        "checks",
        "else",
        "elsif",
        "enum",
        "error",
        "extends",
        "false",
        "fatal",
        "forall",
        "if",
        "implies",
        "import",
        "in",
        "not",
        "null",
        "optional",
        "or",
        "package",
        "section",
        "then",
        "true",
        "type",
        "warning",
        "xor"
      ]
    }

  }

  section "Punctuation" {
    Punctuation Single_Delimiters {
      text = "Single character delimiters:"
      bullets = [
        "Brackets: `(` `)` `[` `]` `{` `}`",
        "Punctuation: `,` `.` `=`",
        "Operators: `*` `/` `%` `+` `-`",
        "Boolean operators: `<` `>`"
      ]
    }

    Punctuation Double_Delimiters {
      text = "Double character delimiters:"
      bullets = [
        "Operators: `**`",
        "Boolean operators: `==` `<=` `>=` `!=`",
        "Punctuation: `=>` `..`"
      ]
    }

    Text Lexing_Disambiguation {
      text = '''Preference is (obviously) given to longer delimiters if
                there is ambiguity; i.e. `==` takes
                precedence over two `=` tokens.'''
    }
  }

  section "Integers" {
    Terminal Integers {
      text = '''Integers are base 10, and leading zeros are
                effectively ignored.'''
      def = "INTEGER ::= [0-9]+"
      examples = ["0", "42", "007"]
    }
  }

  section "Strings" {
    Terminal Strings {
      text = '''There are two versions of a string, double quoted and
                triple quoted:'''
      def = '''STRING ::= ("([^"]|(\"))*")|('{3}.*?'{3})'''
      examples = ["\"foobar\"",
                  "'''potato'''",
                  '''"example with \"quotes\""''']
    }

    Semantics Simple_String_Value {
      kind = Kind.Static
      text = '''The value of a double quoted string is precisely the
                characters between the two double quotes,
                with all instances of the `\"` escape
                sequence being replaced with `"`.'''
    }

    Semantics Complex_String_Value {
      kind = Kind.Static
      text = '''The value of a triple quoted string is the whitespace
                trimmed string of characters between the triple quotes
                (including the line breaks), The common whitespace at
                the beginning of each line (ignoring blank lines) starting
                at the second is removed. The trailing whitespace on
                every line is removed. There is no escaping in a triple
                quoted string.'''
    }
  }

}

/***********************************************************************/

section "Layout and file structure" {

  Text Layout {
    text = "There are three types of files:"
    bullets = [
      '''`.rls` They contains the user-defined type definitions and
         optionally user-defined warnings or checks''',
      '''`.check` They contain only user-defined warning or error messages
         for types declared in `.rsl` files''',
      '''`.trlc` They contain instances of the types (this is where
         your requirements go)'''
    ]
  }

  Semantics File_Parsing_Order {
    kind = Kind.Dynamic
    text = '''
First, all `.rls` files are parsed. Then, if no errors are
raised, all `.check` files are parsed. Finally, if no errors
are raised, all `.trlc` files are parsed.
'''
  }

  Semantics File_Parsing_References {
    kind = Kind.Dynamic
    text = '''
After all files are parsed, references are resolved and
user-defined checks are applied.
'''
  }

  Recommendation Errors_In_TRLC_Files {
    text = '''
It is unspecified how an implementation treats errors in
`.trlc` files, but it is recommended to not stop processing
after the first error.
'''
  }

}

/***********************************************************************/

section "Preamble" {

  Grammar Preamble {
    text = '''All TRLC files start with a package indication.'''
    bnf = '''
file_preamble ::= package_indication
                  { import_clause }

package_indication ::= 'package' IDENTIFIER_name

import_clause ::= 'import' IDENTIFIER_name
'''
  }

  Semantics Current_Package {
    kind = Kind.Static
    text = '''The package indication defines the "current package".'''
  }

  Semantics Import_Visibility {
    kind = Kind.Static
    text = '''A package declared in an RSL file may be imported, in which
              case its name may be used as the prefix of a
              `qualified_name`.'''
  }

  Semantics Self_Imports {
    kind = Kind.Static
    text = '''A package may not import itself.'''
  }

}

/***********************************************************************/

section "Metamodel (RLS) files" {

  Grammar RLS_File {
    text = '''A `.rls` file starts with a package declaration and is
              followed by type declarations.'''
    bnf = '''
      rls_file ::= file_preamble
                   { type_declaration | check_block }
    '''
  }

  Semantics Package_Declaration {
    kind = Kind.Static
    text = '''A package indication in an `.rls` file declares a
              package. Any given package name may only be
              declared once globally.'''
  }

  Semantics Circular_Dependencies {
    kind = Kind.Static
    text = '''In a `.rsl` file, a package may not import a package that
              imports itself, directly or indirectly.'''
  }

  Semantics Builtin_Types {
    kind = Kind.Static
    text = '''An implementation shall support the following builtin types,
              that shall be made available for all packages:'''
    bullets = [
      "Boolean",
      "Integer",
      "String"
    ]
  }

  Semantics Boolean_Values {
    kind = Kind.Static
    text = "A `Boolean` has two values, `false` and `true`."
  }

  Semantics Integer_Values {
    kind = Kind.Static
    text = '''An `Integer` is a signed integer, with an implementation
              defined range. This range shall be at least
              -1000 to 1000, and this can be infinite.'''
  }

  Semantics String_Values {
    kind = Kind.Static
    text = '''A `String` is a sequence of implementation defined
              characters. *(The decision to support Unicode
              or not is left unspecified.)* The maximum
              length of a String, if any, is implementation
              defined, but shall be at least 1000.'''
  }

  Semantics Builtin_Functions {
    kind = Kind.Static
    text = '''A package also includes a number of builtin functions that
              are made available:'''
    bullets = [
      "len",
      "startswith",
      "endswith",
      "matches"
    ]
  }
}

section "Described Names" {

  Grammar Described_Names {
    bnf = '''
      described_name ::= IDENTIFIER_name [ STRING_description ]
    '''
  }

  Semantics Described_Name_Description {
    kind = Kind.Static
    text = '''A described name names an entity. The optional string
              description has no static or dynamic
              semantics.'''
  }

  Semantics Described_Name_Equality {
    kind = Kind.Static
    text = '''Two described names are considered equal if their names are
              equal.'''
  }

  Text Described_Name_Notes {
    text = '''The description has no bearing on equality. The string
              description should be exported to the API, so
              that downstream tools can make use of it. This
              way we don't have to give some comments special meaning,
              and we don't have to implement error-prone heuristics in
              downstream tools for discovering these descriptions.'''
  }

}

section "Type declarations" {

  Grammar Type_Declarations {
    bnf = '''
      type_declaration ::= 'enum' described_name enumeration_declaration
                         | 'type' described_name record_declaration
    '''
  }

  Semantics Duplicate_Types {
    kind = Kind.Static
    text = '''It is an error to create a type with a name that already
              exists in the current package. (Note: this
              especially includes shadowing one of the
              builtin types.)'''
  }

}

section "Enumerations" {

  Grammar Enumeration_Declaration {
    bnf = '''
      enumeration_declaration ::= '{' { enumeration_literal_specification } '}'

      enumeration_literal_specification ::= described_name
    '''
  }

  Semantics Unique_Enumeration_Literals {
    kind = Kind.Static
    text = '''Each described name declares an enumeration literal
              specification, which shall have a unique name
              in that enumeration.'''
  }

  Text Shared_Literals {
    text = '''It is not an error to have the same literal specification
              for different enumerations.'''
  }

  Text Literals_Shadowing_Permitted {
    text = '''It is not an error to have an enumeration literal with the
              same name as a record or enumeration - as
              there is no ambiguity - but it is recommended
              that an implementation emits a warning in this
              case.'''
  }

  Example Enumeration_Example {
    hidden_rsl = '''package Example'''
    rsl = '''
      enum ASIL {
        QM "Not safety relevant"
        A B C D
      }

      enum My_Boolean {
        yes
        no
        file_not_found
      }
    '''
  }

}

section "Qualified names" {

  Grammar Qualified_Name {
    bnf = '''
      qualified_name ::= [ IDENTIFIER_package_name '.' ] IDENTIFIER_name
    '''
  }

  Semantics Valid_Qualifier {
    kind = Kind.Static
    text = '''The package name of a qualified name must be the current
              package or an imported package.'''
  }

  Semantics Valid_Name {
    kind = Kind.Static
    text = '''The name must be a valid symbol in the current scope (if no
              package is provided) or a valid symbol of the
              indicated package.'''
  }

}

section "Record declarations" {

  Grammar Record_Declaration {
    bnf = '''
      record_declaration ::= [ 'extends' qualified_name_ROOT_TYPE ]
                             '{' { component_declaration } '}'

      component_declaration ::=
        described_name [ 'optional' ]
        qualified_name_COMPONENT_TYPE  [ array_declaration ]

      array_declaration ::= '[' INTEGER_lower '..' '*' ']'
                          | '[' INTEGER_lower '..' INTEGER_upper ']'
    '''
  }

  Semantics Valid_Root_Type {
    kind = Kind.Static
    text = "The root type for a record extension must be a valid record type."
  }

  Semantics Unique_Record_Components {
    kind = Kind.Static
    text = '''Each component declaration shall have a unique name in that
              record declaration, or any of its root
              types. *(Two separate record extensions may
              defined the same component, and they may even
              have different types. But you cannot re-define
              a component from a parent type.)*'''
  }

  Semantics Valid_Component_Type {
    kind = Kind.Static
    text = '''Each component type shall refer to a valid type, or to the
              name of the record type itself. It is an error
              to refer to a type that has not been declared
              yet. *(As there are no forward declarations in
              the language, this forces the user type
              hierarchy to be a DAG, but permitting
              self-references.)*'''
  }

  Semantics Anonymous_Arrays {
    kind = Kind.Static
    text = '''A component with an array declaration introduces an
              anonymous array type. This means the type of
              the record component is not the type as
              specified, but rather an array where the
              element type is that type.'''
  }

  Semantics Upper_Bound_Greater_Than_Lower_Bound {
    kind = Kind.Static
    text = '''It is an error to specify an upper bound that is less than
              the lower bound. *(Note that it is permitted
              for them to be equal.)*'''
  }

  Semantics Array_Indexing {
    kind = Kind.Dynamic
    text = '''Arrays are indexed by natural numbers and the first index is
              0.'''
  }

  Semantics Array_Lower_Bound {
    kind = Kind.Dynamic
    text = '''An instance of an array shall not have fewer elements than
              its lower bound.'''
  }

  Semantics Array_Upper_Bound {
    kind = Kind.Dynamic
    text = '''An array type has no upper bound if `*` is specified. An
              array instance for an array type with an upper
              bound shall not have more elements than its
              upper bound.'''
  }

  Semantics Array_Implementation_Upper_Bound {
    kind = Kind.Dynamic
    text = '''An implementation may impose an arbitrary limit to the
              actual upper bound of an array *(that is treat
              the `*` as if it was that limit)*. This limit,
              if it exists, shall be greater than or equal
              to 1000.'''
  }

  Semantics Type_Extensions_Inherit_Everything {
    kind = Kind.Dynamic
    text = '''A record type that extends another inherits all components
              and user defined checks specified for its root
              type.'''
  }

  Semantics Type_Extensions_Polymorphism {
    kind = Kind.Dynamic
    text = '''Instances of an extension may be
              provided as a reference where a root type is
              required; but not the other way around. *(This
              provide a limited form of polymorphism, but
              with the Liskov substitution principle
              guaranteed.)*'''
  }

  Recommendation Zero_Upper_Bound {
    text = '''It is recommended to emit an error on array types with an
              upper bound of zero.'''
  }

  Recommendation Arrays_Sized_One {
    text = '''It is recommended to emit a warning on array types with an
              upper bound of one.'''
  }

  Example Record_Examples {
    hidden_rsl = '''
      package Example
      enum ASIL { QM A B C D }
    '''
    rsl = '''
      type Requirement {
        summary "A short summary of the requirement."
          String

        description "The actual requirement text."
          String

        asil optional ASIL

        codebeamer_link Integer [1..*]
      }

      type Supplier_Requirement extends Requirement {
        supplier_id Integer
      }
    '''
  }

}

section "Check Files" {

  Grammar Check_File {
    text = '''A `.check` file is simply a set of check blocks.'''
    bnf = '''
      check_file ::= package_indication
                     { check_block }
    '''
  }

  Semantics Cannot_Declare_In_Check_File {
    kind = Kind.Static
    text = '''It is an error to indicate a package that has not been
              declared in an `.rsl` file.'''
  }

}

section "Checks" {

  Grammar Check_Block {
    bnf = '''
      check_block ::= 'checks' IDENTIFIER_record_name
                      '{' { check_declaration } '}'

      check_declaration ::= expression ',' [ severity ] STRING_message
                            [ ',' IDENTIFIER_component_name ]

      severity ::= 'warning'
                 | 'error'
                 | 'fatal'
    '''
  }

  Semantics Applicable_Types {
    kind = Kind.Static
    text = '''It is an error to refer to a type that does not exist in the
              current package, or is not a record type.'''
  }

  Semantics Applicable_Components {
    kind = Kind.Static
    text = '''In a check declaration or expression, it is an error to
              refer to a component name that does not belong
              to the record indicated.'''
  }

  Text Only_Current_Package {
    text = '''Note that it is never possible to add checks to a type from
              a foreign package. In check files this is more
              obvious as you cannot have an import clause,
              but this is also true for checks declared in
              `.rsl` files since it is not possible to
              specify a qalified name.'''
  }

  Semantics Check_Evaluation_Order {
    kind = Kind.Dynamic
    text = '''Each check inside a check block evaluated in the specified
              order.'''
  }

  Semantics Check_Evaluation_Order_Across_Blocks {
    kind = Kind.Dynamic
    text = '''If multiple check blocks are declared for the same record,
              then the order of evaluation of each check
              block is unspecified.'''
  }

  Semantics Check_Evaluation_Order_For_Extensions {
    kind = Kind.Dynamic
    text = '''For record extensions, all checks for the base record must
              be evaluated before any check of the record
              extension is evaluated.'''
  }

  Semantics Check_Messages {
    kind  = Kind.Dynamic
    text = '''If the evaluated expression is true, no action is taken. If
              it is false, then a message emitted with the
              specified message text.'''
  }

  Semantics Check_Severity {
    kind = Kind.Dynamic
    text = '''The severity, if provided, controls how future errors are
              treated, and how the TRLC implementation
              terminates.'''
    bullets = ['''A warning has no effect other than emitting the message.''',
               '''An error (the default, in case severity is not specified)
                  causes an implementation to eventually
                  return a non-zero error code, but further
                  checks will be evaluated (potentially
                  creating more messages).''',
               '''A fatal message is like an error, except that no further
                  checks from this check block shall be
                  evaluated for this record instance.''']
  }

  Text Anchoring {
    text = '''The component name (if specified) is a hint where the
              message should be anchored. It is
              implementation defined how or if this is taken
              into account. A suitable anchoring for a
              message without a component could be the
              record object declaration itself. If only a
              single component is used in the expression
              then the message could be anchored the same
              way as if the component was indicated
              explicitly in the check.'''
  }

  Text Sane_Typing {
    text = '''It is an important design goal to keep the type system sane
              and following LSP. I.e. each subtype may only
              narrow the values permitted in a type. This
              means for a record R and its extension RE; any
              valid instance of RE is always a valid
              instance of R if a new binding of R is created
              considering only the fields that are in R. It
              will never be possible to delete, suppress,
              widen, or omit checks in record extensions.'''
  }

  Example Check_Examples {
    hidden_rsl = '''
      package Example
      type Requirement {
        summary optional String
      }
      type OverflowGuard {
        value Integer
      }
    '''
    rsl = '''
      checks Requirement {
        summary != null, warning "You should specify a summary", summary
      }

      check OverflowGuard {
        value >= -100, fatal "Value must be at least -100"
        value <= 100,  fatal "Value must be at most 100"
        // These bound value, and effectively guard against integer
        // overflow in the below expression

        value ** 2 == 25, warning "Value is not 5 or -5"
      }
    '''
  }

}

section "Expressions" {

  Grammar Expression {
    bnf = '''
      expression ::= relation { 'and' relation }
                   | relation { 'or' relation }
                   | relation [ 'xor' relation ]
                   | relation [ 'implies' relation ]
    '''
  }

  Grammar Relation {
    bnf = '''
      relation ::= simple_expression [ comparison_operator simple_expression ]
                 | simple_expression [ 'not' ] 'in' membership_choice
                 | simple_expression [ 'not' ] 'in' simple_expression

      membership_choice ::= simple_expression '..' simple_expression
    '''
  }

  Grammar Simple_Expression {
    bnf = '''
      simple_expression ::= [ adding_operator ]
                            term { adding_operator term }
    '''
  }

  Grammar Term {
    bnf = '''term ::= factor { multiplying_operator factor }'''
  }

  Grammar Factor {
    bnf = '''
      factor ::= primary [ '**' primary ]
               | 'not' primary
               | 'abs' primary
    '''
  }

  Grammar Primary {
    bnf = '''
      primary ::= INTEGER
                | STRING
                | 'null'
                | name
                | '(' expression ')'
                | '(' quantified_expression ')'
                | '(' conditional_expression ')'
    '''
  }

  Recommendation Unary_Minus_Parsing {
    text = '''The parsing of unary minus can be confusing: `-a % b` is
              actually `- (a % b)`. The semantics of `%` are
              carefully specified so that this does not
              matter. It does also mean that `-a / -b` is
              not legal and needs to be written as either
              `-a / (-b)` or even better `(-a) / (-b)`. It
              is recommended that a linter warns whenever a
              unary minus is encountered that has a
              non-trivial `term` or `factor` as its operand.'''
  }

  Example Expression_Examples {
    hidden_rsl = '''
      package Example
      enum ASIL { QM A B C D }
      Type Expression_Examples {
        asil ASIL
        summary String
        description String
        codebeamer_link Integer [1 .. *]
      }
    '''
    rsl = '''
       checks Expression_Examples {
         asil != ASIL.QM, "must be safety related"

         len(summary) + len(description) > 10, "too short"

         description != null implies "potato" in description,
           "description must mention the best vegetable"

         (forall item in codebeamer_link => item > 50000),
           warning "cb link is suspiciously small"
       }
    '''
  }

}

section "Names" {

  Grammar Names {
    bnf = '''
      name ::= qualified_name
             | qualified_name ['.' IDENTIFIER_literal]
             | name '[' expression ']'
             | IDENTIFIER_builtin_function '(' parameter_list ')'
             | BUILTIN_IDENTIFIER '(' parameter_list ')'

      parameter_list ::= expression { ',' expression }
    '''
  }

  Semantics Signature_Len {
    kind = Kind.Static
    text = '''The builtin function `len` is of arity 1. Its parameter must
              be of type `String` or an array type. Its
              return type is `Integer`.'''
  }

  Semantics Signature_String_End_Functions {
    kind = Kind.Static
    text = '''The builtin functions `startswith` and `endswith` are of
              arity 2. All of their parameters must be of
              type `String`. The return type of either
              function is `Boolean`.'''
  }

  Semantics Signature_Matches {
    kind = Kind.Static
    text = '''The builtin function `matches` is of arity 2. Its parameters
              must be of type `String`. The return type is
              `Boolean`. The second parameter must be a
              valid regular expression. *(It is
              implementation defined which regular
              expression language is used, but it is highly,
              _highly_ recommended to implement the standard
              POSIX regular expressions.)*'''
  }

  Semantics Static_Regular_Expression {
    kind = Kind.Static
    text = '''In addition, the second parameter to the `matches` function
              must be a static compile-time constant,
              i.e. it must not depend on the value of a
              record field or the value of a quantified
              variable.'''
  }

  Semantics Len_Semantics {
    kind = Kind.Dynamic
    text = '''The `len` function computes the length of the given string
              or array.'''
  }

  Semantics Startswith_Semantics {
    kind = Kind.Dynamic
    text = '''The `startswith` function returns true iff the first
              parameter fully contains the second parameter
              at its start.'''
  }

  Semantics Endswith_Semantics {
    kind = Kind.Dynamic
    text = '''The `endswith` function returns true iff the first parameter
              fully contains the second parameter at its
              end.'''
  }

  Semantics Matches_Semantics {
    kind = Kind.Dynamic
    text = '''The `matches` function returns true iff the first parameter
              is matched by the regular expression given in
              the second parameter.'''
  }

  Name_Resolution Case_Sensitive {
    text = '''Name resolution is case sensitive.'''
  }

  Example Name_Examples {
    hidden_rsl = '''
      package Example
      enum ASIL { QM A B C D }
      type Name_Examples {
         foo Boolean
         bar Name_Examples
         asil ASIL
         potato Integer [0 .. *]
         field String
      }
    '''
    rsl = '''
      Checks Name_Examples {
        foo, "foo"
        // names the record field foo

        len(field) > 0, "foo"
        // name that is a function call

        potato[3] < potato[2], "foo"
        // name that is an array index
      }
    '''
  }

}

section "Operators" {
  Grammar Operators {
    bnf = '''
      comparison_operator ::= '==' | '!=' | '<' | '<=' | '>' | '>='

      adding_operator ::= '+' | '-'

      multiplying_operator ::= '*' | '/' | '%'
    '''
  }

  Semantics Association {
    kind = Kind.Static
    text = '''For a chain of operators of the same category, the
              association is left to right.'''
  }

  Semantics Range_Checks {
    kind = Kind.Dynamic
    text = '''It is implementation defined if type checks (range or
              length) are performed for intermediate values;
              if type checks are not performed then the
              resulting expression must not be an error.'''
  }

  Text Range_Checks_Example {
    text = '''*(This means you either type check all the time, or you
              guarantee that any intermediate will not
              create an error in the implementation, as long
              as the final value fits in the relevant
              type. For example if A and B are maximum
              length Strings, then `"potato" in A + B` may
              either create an error when attempting to
              concatenate the strings, OR it must work
              correctly. What you cannot do is cause
              undefined behaviour in the evaluation.)*'''
  }

  section "Logical operators" {

    Semantics Logical_Operators {
      kind = Kind.Static
      text = '''There are five Boolean operators defined (not, and, or, xor,
                implies) for expressions of Boolean type.
                The type of the result is Boolean.'''
    }

    Semantics Shortcut_Logical_Operators {
      kind = Kind.Dynamic
      text = '''Operators with short-cut semantics are `and`, `or`, and
                `implies`. They first evaluate their
                left-hand side and proceed to evaluate the
                right-hand side if it could influence the
                final result. The semantics of these
                operators are the usual ones.'''
    }

    Semantics Regular_Logical_Operators {
      kind = Kind.Dynamic
      text = '''Operators with standard semantics are `xor`, and `not`. They
                do the usual thing.'''
    }

  }

  section "Relational operators and membership tests" {

    Semantics Equality_Domain {
      kind = Kind.Static
      text = '''The equality operators `==` and `!=` are defined for all
                types, as long as the types are compatible,
                i.e. they are the same types or one type is
                a (transitive) extension of the other. The
                result is a Boolean.'''
    }

    Semantics Relational_Domain {
      kind = Kind.Static
      text = '''The ordering relations `<`, `<=`, `>=`, and `>` are defined
                for integers only. The result is a Boolean.'''
    }

    Semantics Membership_Domain {
      kind = Kind.Static
      text = '''Range membership tests `not in` and `in` are defined for
                Integers only. The result is a Boolean.'''
    }

    Semantics Substring_Domain {
      kind = Kind.Static
      text = '''Substring tests `not in` and `in` are defined for
                Strings only. The result is a Boolean.'''
    }

    Semantics Simple_Relational_Semantics {
      kind = Kind.Dynamic
      text = '''The meaning of the relationship operators are the usual.'''
    }

    Semantics Inclusive_Membership_Test_Semantics {
      kind = Kind.Dynamic
      text = '''An inclusive range membership test `x in a .. b` has the
                same meaning as the Boolean expression `x >=
                a and x <= b`. *(This means if a is less
                than b, it is not an error. Instead the
                result of such a test is always false.)*'''
    }

    Semantics Exclusive_Membership_Test_Semantics {
      kind = Kind.Dynamic
      text = '''An exclusive range membership test `x not in a .. b` has the
                same meaning as the Boolean expression `x <
                a or x > b`.'''
    }

    Semantics Simple_Substring_Semantics {
      kind = Kind.Dynamic
      text = '''The meaning of the substring test is the usual. *(Note that
                the substring test is of course performed on
                the value of the string, not the original
                literal.)*'''
    }

  }

  section "Adding operators" {

    Semantics Binary_Addition_Domain {
      kind = Kind.Static
      text = '''The binary adding operator `+` is defined for both Integers
                and Strings. The binary subtraction operator
                `-` is defined for only Integers.'''
    }

    Semantics Unary_Addition_Domain {
      kind = Kind.Static
      text = '''The unary adding operator `+`, and the unary subtraction
                operator `-` is defined only for Integers.'''
    }

    Semantics Adding_Types {
      kind = Kind.Static
      text = '''For binary adding operators the types of the operands have
                to match, and the result is the same type as
                the two operands. For unary adding operators
                the result is always Integer.'''
    }

    Semantics Adding_Semantics {
      kind = Kind.Dynamic
      text = '''The definition of `+` and `-` for Integers is the usual one.'''
    }

    Semantics Concatenation_Semantics {
      kind = Kind.Dynamic
      text = '''The definition of `+` for Strings is String concatenation.'''
    }

  }

  section "Multiplying operators" {

    Semantics Multiplying_Domain {
      kind = Kind.Static
      text = '''The multiplying operators `*`, `/`, and `%` are defined only
                for Integer types. The result is an Integer.'''

    }

    Semantics Multiplying_Semantics {
      kind = Kind.Dynamic
      text = '''The definition of `*` is the usual one.'''
    }

    Semantics Division_Semantics {
      kind = Kind.Dynamic
      text = '''The definition of `/` is floor division. *(For example `-5 /
                2` is `2` and `-5 / 2` is `-3`.)*'''
    }

    Semantics Remainder_Semantics {
      kind = Kind.Dynamic
      text = '''The modulus division for `x % y` satisfies the relation `x =
                y*N + (x % y)`, for some (signed) value of
                `N`, with one of the following constraints
                met:'''
      bullets = ['''`x % y` is `0`''',
		 '''`x % y` has the same sign as `y` and an absolute
                    value less than `y`''']
    }

    Semantics Division_By_Zero {
      kind = Kind.Dynamic
      text = '''Division by zero or modulo division by 0 is an error.'''
    }

  }

  section "Highest precedence operators" {

    Semantics Power_Domain {
      kind = Kind.Static
      text = '''The exponentiation operator `**` is defined for Integers
                only, and returns an Integer.'''
    }

    Semantics Power_Static_Exponent {
      kind = Kind.Static
      text = '''The right-hand side parameter of `**` must be a static
                compile-time constant, i.e. it must not
                depend on the value of a record field or the
                value of a quantified variable. It must not
                be negative.'''
    }

    Semantics Absolute_Value_Domain {
      kind = Kind.Static
      text = '''The absolute value prefix operator `abs` is defined for
                Integers only, and returns a (positive)
                Integer.'''
    }

    Semantics Negation_Domain {
      kind = Kind.Static
      text = '''The logical negation prefix operator `not` is defined for
                Booleans only, and returns a Boolean.'''
    }

    Semantics Power_Semantics {
      kind = Kind.Static
      text = '''The definition of exponentiation `**` is the usual one.'''
    }

    Semantics Absolute_Value_Semantics {
      kind = Kind.Static
      text = '''The definition of absolute value `abs` is the usual one.'''
    }

    Semantics Negation_Semantics {
      kind = Kind.Static
      text = '''The definition of logical negation `not` is the usual one.'''
    }

  }

}

section "Quantification" {

  Grammar Quantified_Expression {
    bnf = '''
      quantified_expression ::=
        'forall' IDENTIFIER_name 'in' IDENTIFIER_component_name '=>'
        expression_PREDICATE
    '''
  }

  Name_Resolution Quantification_Object {
    text = '''The component name must be defined in the current record,
              and must be an array type.'''
  }

  Semantics Quantification_Naming_Scope {
    kind = Kind.Static
    text = '''A quantified expression introduces a new name, that is valid
              only inside the predicate. This new name must
              not shadow any other. *(This means two
              separate quantified expressions may use the
              same name, but you may not nest and shadow,
              and you may not shadow a component name
              either.)*'''
  }

  Semantics Quantification_Type {
    kind = Kind.Static
    text = '''The type of the predicate must be Boolean. The result of a
              quantified expression is Boolean.'''
  }

  Semantics Quantification_Evaluation {
    kind = Kind.Dynamic
    text = '''During evaluation of the quantified expression, each element
              of the array is evaluated in sequence and its
              value is bound to the declared name. The
              predicated is then evaluated with this
              binding.'''
  }

  Semantics Universal_Quantification_Semantics {
    kind = Kind.Dynamic
    text = '''For universal *(forall)* quantification the final value is
              true iff all predicates evaluate to
              true. *(This means universal quantification
              over an empty array is vacuously true.)*'''
  }

  Recommendation Quantification_Short_Circuit_Evaluation {
    text = '''In general Quantification is equivalent to a chain of `and`
              or `or` expressions, however it is left
              unspecified if quantification is using
              short-circuit semantics or not. It is
              recommended (for sanity) to do the following:'''
    bullets = ['''For actual evaluation, use short-circuit semantics, as speed
                  is important.''',
	       '''For static analysis or linting, use non-short-circuit
                  semantics, as using a quantifier as a
                  complex guard is not reasonable.''']
  }

}

section "Conditional expressions" {

  Grammar Conditional_Expression {
    bnf = '''
      conditional_expression ::=
      'if' expression_CONDITION 'then' expression_DEPENDENT
      {'elsif' expression_CONDITION 'then' expression_DEPENDENT }
      'else' expression_DEPENDENT
    '''
  }

  Semantics Conditional_Expression_Types {
    kind = Kind.Static
    text = '''The condition expressions must be of Boolean type. The
              dependent expressions must all be of the same
              type, and the type of the entire conditional
              expression is also of that type.'''
  }

  Semantics Conditional_Expression_Evaluation {
    kind = Kind.Dynamic
    text = '''Each condition is evaluated in sequence. Evaluation stops on
              the first condition that evaluates to true;
              after which the corresponding dependent
              expression is evaluated and returned.'''
  }

  Semantics Conditional_Expression_Else {
    kind = Kind.Dynamic
    text = '''If all condition are evaluated to false, then the else
              dependent expression is evaluated and
              returned.'''
  }

}

section "TRLC Files" {

  Grammar TRLC_File {
    text = '''A `.trlc` file is simply a set of record object declarations.'''
    bnf = '''
      trlc_file ::= file_preamble
                    { trlc_entry }

      trlc_entry ::= section_declaration
                   | record_object_declaration
    '''
  }

  Text Package_Declarations_In_TRLC {
    text = '''*(Note that it is possible to indicate a package that has
              not been declared in an `.rsl` file, in which
              case it is declared by the
              package_indication. Note that such a package
              cannot be imported in by other `.trlc`
              files.)*'''
  }

}

section "Sections" {

  Grammar Section_Declaration {
    text = '''A section has no semantic impact, and no impact on name
              resolution. Section names do not have to be
              unique. It may be exposed in an API, for
              example to section a HTML view of
              requirements.'''
    bnf = '''
      section_declaration ::= 'section' STRING_section_name
                              '{' { trlc_entry } '}'
    '''
  }

}

section "Record object declarations" {

  Grammar Record_Object_Declaration {
    bnf = '''
      record_object_declaration ::=
        qualified_name IDENTIFIER_name
        '{' { component_association } '}'

      component_association ::= IDENTIFIER_component_name '=' value

      value ::= [ adding_operator ] INTEGER
              | STRING
              | qualified_name_RECORD_OBJECT
              | qualified_name_ENUM_TYPE '.' IDENTIFIER_enumeration_literal
              | '[' [ value { ',' value } ] ']'
    '''
  }

  Semantics Valid_Record_Types {
    kind = Kind.Static
    text = '''The type of the declaration must be a valid record type. If
              no qualified name is given, the record type
              must be in the indicated package.'''
  }

  Semantics Unique_Object_Names {
    kind = Kind.Static
    text = '''The name of the declaration must be a unique name and
              sufficiently distinct in the current
              package. *(See name resolution for a
              definition of sufficiently distinct.)* The
              name of the declaration must not shadow a type
              name or package.'''
  }

  Semantics Valid_Components {
    kind = Kind.Static
    text = '''Each component name must be a valid component of the record
              type.'''
  }

  Semantics Valid_Enumeration_Literals {
    kind = Kind.Static
    text = '''Each enumeration must be a valid enumeration type in the
              indicated (or qualified) package. Each
              enumeration literal must be a valid literal of
              the indicated enumeration in the prefix.'''
  }

  Semantics Matching_Value_Types {
    kind = Kind.Static
    text = '''The type of each value must match each component or array
              element type. Records are specified through
              references *(there is no way to specify an
              inline anonymous instance)*.'''
  }

  Semantics Mandatory_Components {
    kind = Kind.Static
    text = '''It is an error to not provide a value for a non-optional
              component.'''
  }

  Semantics Evaluation_Of_Checks {
    kind = Kind.Dynamic
    text = '''A record object declaration creates a new binding for a
              record. After references are resolved, all
              applicable checks are evaluated in the context
              of this binding.'''
  }

  Semantics Late_Reference_Checking {
    kind = Kind.Dynamic
    text = '''It is an error to refer to a record by name that does not
              exist. It is legal to refer to an record that
              has not been encountered yet, as references
              are resolved after parsing.'''
  }

  Semantics References_To_Extensions {
    kind = Kind.Dynamic
    text = '''A record reference must match in type, i.e. be of the
              correct type or any record extension of that
              type. *(For example if RE extends R, then a
              list of R may contain references to instances
              of R and RE. A list of RE may not contain any
              references to R.)*'''
  }

  Name_Resolution Sufficiently_Distinct {
    text = '''When declaring record objects there are wider rules that
              indicate name clashes. Specifically a record
              may not be declared if its "simplified name"
              clashes with any other "simplified name". A
              "simplified name" is the name converted to
              lowercase and all underscored removed.'''
  }

  Text Simplified_Name_Example {
    text = '''*(For example the simplified name of `Foo_Bar` is `foobar`
              and therefore it clashes with `Foobar`,
              `F_Oobar`, or `Foo_B_A_R`. But only at record
              declaration; when referring to other object
              you still have to use a precise match.)*'''
  }

  Text Simplified_Name_Rationale {
    text = '''*(The purpose of this rule is to avoid requirements that
              have hard to distinguish names.)*'''
  }

  Recommendation Record_Object_API {
    text = '''When exposing record instances through the API, it is
              required to make the type of the instance
              available. There are some alternatives,
              none of which are required:'''
    bullets = ['''Provide an implicit String record field named `type` that
                  carries this information (it is safe to do
                  that, as it is impossible to specify a
                  record type with a field named `type`).''',
	       '''Provide a function or attribute that, when called, provides
                  the type information.''',
	       '''Provide the type information through the type system of the
                  API language (e.g. the Python type system).''']
  }

}

section "Null Values" {

  Semantics Polymorphic_Null {
    kind = Kind.Static
    text = '''The null value has a polymorphic type that matches the
              required type given by context.'''
  }

  Semantics Expressions_Always_Resolve_Types {
    kind = Kind.Static
    text = '''It is an error to form an expression if the type of all
              operands cannot be statically
              determined. *(This means the expression `null
              == null` is not true, but an error.)*'''
  }

  Semantics Unspecified_Optional_Components {
    kind = Kind.Dynamic
    text = '''The value of an optional field that is not specified is
              `null`.'''
  }

  Semantics Null_Equality {
    kind = Kind.Dynamic
    text = '''For equality the null value is considered equal to itself,
              but not equal to any non-null value.'''
  }

  Semantics Null_Is_Invalid {
    kind = Kind.Dynamic
    text = '''For any other operator or operation, the null value is
              considered out of bounds and raises an
              error. *(This means you can check if something
              is null or not, but any other use will cause
              an error.)*'''
  }

}
